import { createContext, useContext} from "react";
import { api } from '../services/api'
export const AuthenticatedContext = createContext({})

import { useState, useEffect } from 'react'

import { store } from '../reduxHook/store'
import { Provider } from 'react-redux';

function AuthenticatedProvider({ children }) {

    const [ userContextData, setUserContextData ] = useState({})
    
    async function signIn ({ email, password }) {

        try { 

            const signInResponse = await api.post('/sessions', {email, password})
            const { user, token } = signInResponse.data

            localStorage.setItem("@foodexplorer:user", JSON.stringify(user))
            localStorage.setItem("@foodexplorer:token", token)
          
            api.defaults.headers.common["Authorization"] = `Bearer ${token}` // the token generated by sessions controller is set as the request authorization header to be read on middleware checkpoint
            setUserContextData({ user })

        }   catch (error) {

            if (error.response) {
                alert(error.response.data.message)
            } else {
                console.log(error)
                alert('It is not possible to log in.')
            }

        }
    }

    async function signOut() {
        
        localStorage.removeItem("@foodexplorer:user")
        localStorage.removeItem("@foodexplorer:token")
        localStorage.removeItem("@foodexplorer:cartQuantity")
        setUserContextData({})

    }

    async function saveGlobalCartQuantity (quantity) {

        const dishCurrentQuantity = 0 + quantity
        localStorage.setItem("@foodexplorer:cartQuantity", dishCurrentQuantity)

    }

    useEffect( () => {

        const user = localStorage.getItem("@foodexplorer:user")
        const token = localStorage.getItem("@foodexplorer:token")
   
        if ( token && user ) {

            api.defaults.headers.common["Authorization"] = `Bearer ${token}`
            setUserContextData({ user: JSON.parse(user) })

        }

    }, [] )

    // function to select a dish picture


    return (

        <Provider store={store}>
            <AuthenticatedContext.Provider value={{ signIn, signOut, user: userContextData.user, saveGlobalCartQuantity }}>
                {children}
            </AuthenticatedContext.Provider>
        </Provider>

    )
}

function useAuthContext() {
    const context = useContext(AuthenticatedContext)
    return context
}

export { AuthenticatedProvider, useAuthContext }